// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	discordgo "github.com/bwmarrin/discordgo"
	mock "github.com/stretchr/testify/mock"
)

// DiscordSession is an autogenerated mock type for the DiscordSession type
type DiscordSession struct {
	mock.Mock
}

// AddHandler provides a mock function with given fields: _a0
func (_m *DiscordSession) AddHandler(_a0 interface{}) func() {
	ret := _m.Called(_a0)

	var r0 func()
	if rf, ok := ret.Get(0).(func(interface{}) func()); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// Channel provides a mock function with given fields: channelID, options
func (_m *DiscordSession) Channel(channelID string, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, ...discordgo.RequestOption) *discordgo.Channel); ok {
		r0 = rf(channelID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...discordgo.RequestOption) error); ok {
		r1 = rf(channelID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessage provides a mock function with given fields: channelID, messageID, options
func (_m *DiscordSession) ChannelMessage(channelID string, messageID string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, messageID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, ...discordgo.RequestOption) *discordgo.Message); ok {
		r0 = rf(channelID, messageID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...discordgo.RequestOption) error); ok {
		r1 = rf(channelID, messageID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessages provides a mock function with given fields: channelID, limit, beforeID, afterID, aroundID, options
func (_m *DiscordSession) ChannelMessages(channelID string, limit int, beforeID string, afterID string, aroundID string, options ...discordgo.RequestOption) ([]*discordgo.Message, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, limit, beforeID, afterID, aroundID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*discordgo.Message
	if rf, ok := ret.Get(0).(func(string, int, string, string, string, ...discordgo.RequestOption) []*discordgo.Message); ok {
		r0 = rf(channelID, limit, beforeID, afterID, aroundID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, string, string, string, ...discordgo.RequestOption) error); ok {
		r1 = rf(channelID, limit, beforeID, afterID, aroundID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Guild provides a mock function with given fields: guildID, options
func (_m *DiscordSession) Guild(guildID string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, guildID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *discordgo.Guild
	if rf, ok := ret.Get(0).(func(string, ...discordgo.RequestOption) *discordgo.Guild); ok {
		r0 = rf(guildID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...discordgo.RequestOption) error); ok {
		r1 = rf(guildID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildChannels provides a mock function with given fields: guildID, options
func (_m *DiscordSession) GuildChannels(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Channel, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, guildID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, ...discordgo.RequestOption) []*discordgo.Channel); ok {
		r0 = rf(guildID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...discordgo.RequestOption) error); ok {
		r1 = rf(guildID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildEmojis provides a mock function with given fields: guildID, options
func (_m *DiscordSession) GuildEmojis(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Emoji, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, guildID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*discordgo.Emoji
	if rf, ok := ret.Get(0).(func(string, ...discordgo.RequestOption) []*discordgo.Emoji); ok {
		r0 = rf(guildID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Emoji)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...discordgo.RequestOption) error); ok {
		r1 = rf(guildID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildMember provides a mock function with given fields: guildID, memberID, options
func (_m *DiscordSession) GuildMember(guildID string, memberID string, options ...discordgo.RequestOption) (*discordgo.Member, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, guildID, memberID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *discordgo.Member
	if rf, ok := ret.Get(0).(func(string, string, ...discordgo.RequestOption) *discordgo.Member); ok {
		r0 = rf(guildID, memberID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...discordgo.RequestOption) error); ok {
		r1 = rf(guildID, memberID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildMembers provides a mock function with given fields: guildID, after, limit, options
func (_m *DiscordSession) GuildMembers(guildID string, after string, limit int, options ...discordgo.RequestOption) ([]*discordgo.Member, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, guildID, after, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*discordgo.Member
	if rf, ok := ret.Get(0).(func(string, string, int, ...discordgo.RequestOption) []*discordgo.Member); ok {
		r0 = rf(guildID, after, limit, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, ...discordgo.RequestOption) error); ok {
		r1 = rf(guildID, after, limit, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildRoles provides a mock function with given fields: guildID, options
func (_m *DiscordSession) GuildRoles(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Role, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, guildID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*discordgo.Role
	if rf, ok := ret.Get(0).(func(string, ...discordgo.RequestOption) []*discordgo.Role); ok {
		r0 = rf(guildID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...discordgo.RequestOption) error); ok {
		r1 = rf(guildID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: userID, options
func (_m *DiscordSession) User(userID string, options ...discordgo.RequestOption) (*discordgo.User, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *discordgo.User
	if rf, ok := ret.Get(0).(func(string, ...discordgo.RequestOption) *discordgo.User); ok {
		r0 = rf(userID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...discordgo.RequestOption) error); ok {
		r1 = rf(userID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscordSession interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscordSession creates a new instance of DiscordSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscordSession(t mockConstructorTestingTNewDiscordSession) *DiscordSession {
	mock := &DiscordSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
